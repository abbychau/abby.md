除了 Go、Rust、Nim，还有哪些新编程语言更靠谱？
<p>我是来吐糟问主的，先吐再答。</p><p><br></p><p><br></p><blockquote>用 Go 语言做了一个网站，数据库用的封装的谷歌的 leveldb，自己又封装了一个c语言执行的正则表达式，加速了路由的解析，运行了几个月，除了对Json 的处理过于繁琐不太满意，Go语言确实效率奇高，经过几次整合和设计后，整个服务器的代码加起来也不超过2000行。<br>但是感觉还是有些瑕疵，比如说，繁复的错误处理，虽然有几种方法可以缓减，但实际上只是把麻烦变了一个样。再者，有时候错误就应该和其他值统一，不应该检查一遍前面的逻辑是否存在错误，又要去检查它的另一个返回值是不是空值。比如说读取数据库，读取操作没任何错误，但查找的结果就是个空值。当然可以原地解决掉可能的错误，就返回一个值。但这会扰乱同类型问题集中解决的原则。会加重维护的难度。不像c#，不需要这么啰嗦，把关键的地方扔到一个try catch 就能抽象的解决一大块，只需要考虑出现问题后的应付方案，因为有些错误的出现几率几乎没有，一旦这种错误出现很可能是因为硬件故障，那不应该是开发者应该处处担心，处处检查的问题。当然 recover 加panic 好像就是try catch 的翻版。但不是每一个错误都会 panic, 都会触发 recover 。</blockquote><p>错误类型是很多新语言共有的特点，Go, Rust, Kotlin, Swift。。。那就是市场有这个需求。反正如果这个都用不着，直接上Scripting language 就可以了。</p><p><br></p><blockquote>还有就是，如果对一个值（其实它是个nil值），进行类型申明，会抛出一个panic, 所以处理Json 数据的时候，不然就一个一个的检查，不然来个 recover, 但有时候还是想它抛掉这个缺失继续跑，recover就变得有点复杂了。</blockquote><p>默。。。json.Unmarshal target 的struct 有个omitempty 的flag 可以用。。。。</p><p><br></p><blockquote>还有就是 Go语言，看似简单，没有良好的编程习惯，很可能在同一个包里，做同样的事情，或者一不小心，就把别的文件里定义的变量给重写了。</blockquote><p>Global 这东西， 没有的时候就死活都自己去做一个(像Rust 的lazy_static), 有的时候又怪别人没管好。。。</p><p><br></p><blockquote>再来说说 Rust ，node.js 的 包管理器，最大的毛病是同一个模块，可能重复出现在各个子模块的依赖项里，让整个项目的依赖项，变成一个包括n个文件，臃肿不堪的文件夹。</blockquote><p>独立起依赖算是缺点那这缺点只是对比起Go 来说的...</p><p><br></p><blockquote>Rust 的cargo 如果尝试加载本地模块的话也有同样的问题。而且远远没有npm 那么功能强大，依托github 的亚马逊服务器，让中国用户用它导入包时，很郁闷。</blockquote><p>找个cargo vendor 之类的，中国用户用它导入github 慢不算语言的缺点</p><p><br></p><blockquote>再者是Rust 的语法有太多小hack，比如说，数值允许下划线来提高阅读性。</blockquote><p>這個特性也沒有迫著你去用啊</p><p><br></p><blockquote>一个块里最后一个表达式不带分号怎么样？带了又怎么样，</blockquote><p>区塊中的返回不带return 更省力，比如 let a = { b=init(match k{p(x)=&gt;({let k = kk::new(); k.set(x); k}), _=&gt;1); b.send(); b } ; 而且我更没想到这也能不满。。。</p><p><br></p><blockquote>连声明一个常量也有 const，static的区别，然后字符串又是个特例。加上眼花缭乱的数值类型的签名，二进制，八进制，前缀，后缀搞在一堆。</blockquote><p>我听不明白，这是说"我想用一个语言却不想去知有甚麽primitive types"？</p><p><br></p><blockquote>还有一堆让人十分郁闷的开启关闭编译器的各种特性的属性，数组切片，拥有者，借入借出，宏……</blockquote><p>不喜欢的特性可以不用，要用到時沒有才是問題吧。没有Owner model 那可以用回GC 语言, Go 和Nim。要不含GC 程序总要想个办法记下来。</p><p><br></p><blockquote>总觉得c ++也不过如此。这么多东西搞在一起。又没有强大的开发工具，还要时时刻刻考虑堆栈等内存问题，然后还要思考整个设计方式，绝对是精力旺盛，喜欢拼命折腾的人的最爱。因为你需要巨大的投入来处理各种郁闷，产能却鸡肋的问题。</blockquote><p>产能和web 应用上的确低下，但写个基础应用，用上regex, nom 之类的包时，产能就不低了。用C/C++ 写很痛，有其他语言写还不够旧的快。</p><p><br></p><blockquote>还有就是Nim, 静态语言，有可以完全关闭的垃圾回收，把代码编译成c代码，性能当然也不会差。它的语法很像Python,几个从业很久的c++高手都说，这门语言让他们眼镜一亮，但因为开发文档和社区太那个了。无论多么简单的语言，背后其实都是需要很大投入的一种文化和一种思维逻辑。暂时还没有深入接触。</blockquote><p>那接触一下。</p><p><br></p><blockquote>用过c#,受不了它散散步，也要开着微软1号线的庞大。</blockquote><p>C# 只是个语言, 不上 .net framework 用甚麽写都可以，对比起JS,Rust, Go,Java 等等，多少人都是 Vim/Emacs/VSCode 等等渡日, C# 也不例外， 它还有 .Net core。也有Mono, 也可以用MonoDevelop。</p><p><br></p><blockquote>用过PHP ，框架和版本一更新，潘多拉盒子打开了，又得无数次拜访谷歌，</blockquote><p>这我还是第一次听过有人觉得PHP 升级痛苦。初初配置伺服器谁不要Google 无数次？真枉费PHP 为了透明升级，背负了这麽久"内置方法命名和参数次序混乱"这骂名。而且，你感受到痛苦不代表這是PHP所以特別痛苦。</p><p><br></p><blockquote>用过Python 受不了那种严格的缩进，</blockquote><p>这样的话连Nim 都用不了，缩进敏感或者一堆括号总要选一个。</p><p><br></p><blockquote>和对中文编码的不友善。</blockquote><p>python2 加个u , python3 默认utf8，甚麽都不用做，有甚麽不友善？</p><p><br></p><blockquote>用过JAVA,虚拟机太吃内存</blockquote><p>我表示问号。。。你举个例子</p><p><br></p><blockquote>而且类库太庞大又不像c#有那么牛逼的开发文档。而且，就算你不愿意面向对象，各种库也逼迫你定义各种接口，虚拟类，和尾大不掉的泛型。</blockquote><p>这是库的问题，今天轻量库不少的。</p><p><br></p><blockquote>而Node.js ，如果真的做服务器，还宁可用PHP。</blockquote><p>你到底在问语言还是服务器？Node.js 不等於JS/ES/TS/Coffee 等等。。做服务器宁可用PHP 不等於JS 不好。</p><p><br></p><p>答案：</p><p>如果Go, Rust, Nim 都算新的话, <b>Swift</b> 和<b>Kotlin</b> 都挺漂亮的，而且十分靠谱。如果还是掂记着脚本语言的产能。那只好上Python。</p><p>偏要和PHP 比的话，你试这麽多语言都单单是为了写Web後端?</p><p>要看起来漂亮，数组又简单的话，还可以用用Lua，但我觉得你会觉得建个class 都要用到metatable 不友好。。。</p><p>Nim 是挺不错的，算法写对就有一级性能，而且原生Json Parser 也很快，估计适合写开伺服器的你，但库很少，要用到甚麽都没有时，你又觉得不高兴了。而且我还记得你受不了那种严格的缩进。</p><p><br></p><p>就单纯对接服务和伺服器的业务逻辑来说，要和PHP 和JS 比产能是不可能的，那几乎是可以想到的最优解了，但很多项目远不只这层。</p><p>程序语言的追求也远不只这些。</p><p>而且规模化的路径也不只一条。多尝试不同的语言是一年好事，但如果单凭感觉就已经会不满的话，除了自己写一个别无他法。</p><p><br></p><p>對了JS 的變種 TS, Dart, Flow, 等等也可以。</p>
1546991929