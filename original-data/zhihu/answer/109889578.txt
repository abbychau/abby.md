如何抽象评判现有语言优劣，继而设计一款别具优雅的计算机语言 X ？
作者：Abby Chau<br>链接：<a href="https://www.zhihu.com/question/21602572/answer/109889578" class="internal">如何抽象评判现有语言优劣，继而设计一款别具优雅的计算机语言 X ？ - Abby Chau 的回答</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br><br>要对比两款语言优不优雅，则必须要在相近的主要应用场景和可能应用场景比较。<br>比如说actionscript 比c 优雅是很奇怪的事。<br>通常愈低阶的语言应用场景愈广，愈难学习，也愈难读。<br>应用场景愈窄的语言，设计起来更像是一组库，找到重合的地方，包含更高级的操作，比如说vb6 和php。<br>如果有一种语言，在同一个代码量级下，以更少的操作方式，达到同一个应用广度，我应为就已经算更优雅了。<br><br>就我看来，c++ 的auto pointer，和php 的associative array，都是极优雅的设计。虽然背后牺牲了性能。<br><br>然后就到，到底在同一个记忆体用量级同用时级下，以更短的代码完成，算不算优雅。但这基本上是在恒量语法设计是不是易于编译器或者解释器优化的问题了。<br><br>然后又更微小也常常被人拿来讨论的东西：<br>优雅包不包括只用一种方法完成工作呢？（python vs perl)<br>包不包括直译器友好度？（Lua 和js 看起来优雅很大程度也因此而已）<br>包不包括代码支援原生UTF8，支援记忆体操作，支援内嵌其他语言，等等无数既定场景的常用功能等等呢？<br><br>即使对于优雅的定义也仅此而已，我们也还是无法为他们权重...<br>不同的场景有不同的优雅，但就我看来swift和rust 这些新世代语言都挺优秀的。
1468522082