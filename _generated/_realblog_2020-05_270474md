<p>這篇文章之前已經打過一次, 但在開發的途中出現 Kernal Secrutiy Check Error</p>
<p><img src="https://scontent-nrt1-1.xx.fbcdn.net/v/t1.0-9/p720x720/96696319_10158168999813965_8093637269677670400_o.jpg?_nc_cat=100&amp;_nc_sid=110474&amp;_nc_ohc=kxeXhAN5mVkAX8d-dXr&amp;_nc_ht=scontent-nrt1-1.xx&amp;_nc_tp=6&amp;oh=7301c9c365a1fb8a69875a2d3ab69e55&amp;oe=5EE06131" alt="" /></p>
<p>而且QEMU 好像碰到了閃重啟問題。所以如果可以的話 , 還是建議用整個Linux 來做開發。</p>
<h2>Volatile</h2>
<p>在C, C++, Java, C# 中都會看到這個變數標示, 通常我們會標示它給多線程讀取的變數, 但基礎意義上來說 , <code>Volatile</code> 這個字在他們中間卻有很大的分別。以下我都是以C 作為標準。</p>
<p>可能會有人聯想到Mutex 等臨界區保護的方案 , 但是Volatile 其實只是單純地讓編譯器不要把讀取這個變數時優化掉而已。並無任何的邏輯增減。</p>
<p>這是用到Volatile, 是因為我們現在要讀取的是VGA Buffer 而不是RAM , 所以編譯器並不知道這種讀寫是有意義的。
有關具體的優化的例子, 可以看這頁WIKI : <a href="https://zh.wikipedia.org/wiki/Volatile%E5%8F%98%E9%87%8F">https://zh.wikipedia.org/wiki/Volatile%E5%8F%98%E9%87%8F</a></p>
<p>(我覺得上次(當機前)講得好多了)</p>
<p>那麼, 在<code>Cargo.toml</code> 加入:</p>
<pre><code class="language-toml">[dependencies]
volatile = "0.2.6"</code></pre>
<p>在<code>vga_buffer.rs</code> 的頂部加入 <code>use volatile::Volatile;</code>
並修改 Buffer 為 :</p>
<pre><code class="language-Rust">struct Buffer {
    chars: [[Volatile&lt;ScreenChar&gt;; BUFFER_WIDTH]; BUFFER_HEIGHT],
}</code></pre>
<p>再把 <code>fn write_byte</code> 中間的幾句修改成:</p>
<pre><code class="language-Rust">                self.buffer.chars[row][col].write(ScreenChar {
                    ascii_character: byte,
                    color_code: color_code,
                });</code></pre>
<p>這樣我們就可以用<code>Volatile</code> 這個Crate 來避開 rustc 的優化了。</p>