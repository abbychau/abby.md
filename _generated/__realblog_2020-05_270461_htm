<p>終於來到 <code>Hello World</code> 了!</p>
<p>修改main.rs</p>
<pre><code class="language-Rust">
#![no_std]
#![no_main]

use core::panic::PanicInfo;

#[panic_handler]
fn panic(_info: &amp;PanicInfo) -&gt; ! {
    loop {}
}

const HELLO: &amp;[u8] = b"Hello, world!";

#[no_mangle]
pub extern fn _start() -&gt; ! {
    let vga_buffer = 0xB8000 as *mut u8;

    for (i, &amp;byte) in HELLO.iter().enumerate() {
        unsafe {
            *vga_buffer.offset(i as isize * 2) = byte;
            *vga_buffer.offset(i as isize * 2 + 1) = 0b01011010;
        }
    }

    loop {}
}
</code></pre>
<p>要點:</p>
<ul>
<li>0xB8000 : 這個VGA文字緩衝器的記憶體起始位址</li>
<li>一個字元以兩個位元組來表示 所以 i as isize * 2</li>
<li>第一個位元組表示字元的值，第二個位元組表示字元的前景顏色(4位元)、背景顏色(4位元)</li>
<li>0-7分別代表: 黑(0b000)、藍(0b001)、綠(0b010)、青(0b011)、紅(0b100)、洋紅(0b101)、棕(0b110)、淺灰(0b111)</li>
<li>前補1個位元, 表示顏色的亮度，0為正常、1為加亮。</li>
</ul>
<p><img src="https://i.imgur.com/VTQWjtZ.png" alt="" /></p>
<p>你會看到上面有Hello World 了。
在高興的同時, 有沒有一點困惑呢? 明明沒有字符表, 為為甚還會有字, 是不是bootimage 有甚麼大東西包進去了?</p>
<p>那麼科普一個叫<code>VGA Text Buffer</code> 的東西 : <a href="https://en.wikipedia.org/wiki/VGA_text_mode">https://en.wikipedia.org/wiki/VGA_text_mode</a></p>
<p>它是個VGA 硬體中的一個特點的記憶體區域, 格式可以看上面的Wiki
限制有一個: 就是80 * 25 的大小, 以及只可以顯示以下的字符。</p>
<p><img src="https://i.imgur.com/0mZVaq4.png" alt="" /></p>